# 강의 제목 : Node.js와 express로 구현하는 OOP

## 용어 정리

### 런타임(Runtime) : 프로그래밍 언어로 만들어진 코드가 실행되는 환경

## JavaScript 와 런타임
- 언어들을 이해하고 실행시켜주는 별도의 소프트웨어 환경(런타임)이 필요
- 런타임이 중간에서 코드를 해석하며 컴퓨터가 이해할 수 있는 명령으로 바꿔주는 역할

---

## 크롬은 JavaScript의 런타임
- 자바스크립트 실행 환경: 브라우저와 Node.js
  - 브라우저
    - 원래 JavaScript는 웹 페이지를 동적으로 만들기 위해 개발된 언어로, 웹 브라우저 안에서만 실행될 수 있었다. 
    - 크롬이나 엣지 같은 웹 브라우저가 자바스크립트의 런타임, 즉 실행 환경이 됩니다.
  - Node.js
    - 기술이 발전하면서 웹 브라우저가 아닌, 자신의 컴퓨터에서도 자바스크립트를 사용하고 싶어함.
      -> 내 컴퓨터에서 JavaScript를 실행시키려면 런타임이 필요하다. 그게 바로 Node.js

--- 

## 크롬창에서 UI를 만드는 절차
1. 초기 HTML 로드
2. HTML 내의 <script> 태그나 동적 import를 통해 JS 파일 요청
3. 서버가 JS 파일 전송
4. 브라우저의 JS 엔진(V8)이 코드 실행
5. DOM 조작을 통해 UI 생성

---

## 3000 포트에서 실행되고 있는 프로세스는 결국 Node.js 런타임이다!!
- 프로세스 실행:
  - V8 엔진을 통해 내가 쓴 코드를 JavaScript 코드를 실행
- JavaScript 코드를 읽고, 이를 해석하여 실행 가능한 기계어로 컴파일하는 과정까지 포함!

---

## 객체지향 프로그래밍 - OOP
1. 캡슐화
2. 추상화
3. 상속
4. 다형성

---

## 의존성 주입
- MemoRouter는 메모와 관련된 HTTP 요청을 처리하는 라우터
- 메모와 관련한 CRUD 기능을 가지고 있는 다른 Class에게 기능을 의존하는 상태이다